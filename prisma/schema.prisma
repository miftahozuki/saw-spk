// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Alternatif {
  id Int @id @default(autoincrement())
  nama String
  penilaian Penilaian[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Kriteria {
  id Int @id @default(autoincrement())
  kode String @unique
  nama String
  bobot Float
  jenis JenisKriteria
  subkriteria subKriteria[]
  penilaian Penilaian[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JenisKriteria {
  Cost
  Benefit
}

enum UserRole {
  Admin
  User
}

model subKriteria {
  id Int @id @default(autoincrement())
  nama String
  nilai Int
  kriteria Kriteria @relation(fields: [kriteriaId], references: [id], onDelete: Cascade)
  kriteriaId Int
  penilaian Penilaian[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Penilaian {
  id String @id @default(cuid())
  kriteria Kriteria @relation(fields: [kriteriaId], references: [id], onDelete: Cascade)
  kriteriaId Int
  subkriteria subKriteria? @relation(fields: [subkriteriaId], references: [id], onDelete: Cascade)
  subkriteriaId Int?
  alternatif Alternatif @relation(fields: [alternatifId], references: [id], onDelete: Cascade)
  alternatifId Int
}

model User {
  id            String    @id @default(cuid())
  name          String
  username      String    @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole? @default(Admin)
 
  @@map("users")
}